import numpy as np
from matrixop import ConstitutiveMatrices


def filter_zero(x):
    for i in range(0, 3):
        for j in range(0, 3):
            if abs(x[i][j]) < 10 ** -13:
                x[i][j] = 0.0
    return x


def filter_zero_vector(x):
    for i in range(0, 3):
        if abs(x[i]) < 10 ** -11:
            x[i] = 0.0
    return x


class Laminates:
    def __init__(self, nxx, nyy, nxy, mxx, myy, mxy, e11, e22, g12, v12, t, angles, ply_integrity):
        self.nxx = nxx
        self.nyy = nyy
        self.nxy = nxy
        self.mxx = mxx
        self.myy = myy
        self.mxy = mxy
        self.loads = np.array([self.nxx, self.nyy, self.nxy, self.mxx, self.myy, self.mxy])
        self.e11 = e11
        self.e22 = e22
        self.g12 = g12
        self.v12 = v12
        self.t = t
        self.angles = np.radians(angles)  # Convert to radians
        self.n = len(self.angles)  # number of plys
        self.a = self.b = self.d = np.array([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])
        self.t_lam = self.t.sum()  # Total thickness of laminate
        self.ply_integrity = ply_integrity  # Ply integrity factor for each ply: β = True (intact), β = False (failed)

        self.z0 = -self.t_lam / 2  # Coordinate of lower laminate surface
        self.z = np.zeros(len(angles), dtype=float)
        for i in range(1, self.n+1):
            self.z[i-1] = self.z0 + i * self.t[i-1]
        self.zm = np.zeros(len(angles), dtype=float)
        for i in range(1, self.n+1):
            self.zm[i-1] = self.z0 - (t[i-1]/2) + i * self.t[i-1]

        self.midplane_strains_curv = np.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                                     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                                     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                                     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                                     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                                     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])

        self.plys = []
        for j in range(0, self.n):
            self.plys.append(ConstitutiveMatrices(self.e11[j], self.e22[j], self.v12[j], self.g12[j], self.angles[j],
                                                  self.ply_integrity[j]))
        self.coefficient = np.array([[0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0]], dtype='float')
        self.a_calc()
        self.b_calc()
        self.d_calc()
        self.a_b_d_calc()
        self.midplane_strains_curv_calc()

    # Getters
    def get_a(self):
        return self.a

    def get_b(self):
        return self.b

    def get_d(self):
        return self.d

    def get_z(self):
        return self.z

    def get_coefficient(self):
        return self.coefficient

    def get_midplane_strains_curv(self):
        return self.midplane_strains_curv

    def get_midplane_strains(self):
        e, k = np.split(self.get_midplane_strains_curv(), 2)
        return e

    def get_midplane_curvatures(self):
        e, k = np.split(self.get_midplane_strains_curv(), 2)
        return k

    def get_global_strain_at_ply_midplane(self, i):
        return self.get_midplane_strains() + self.zm[i]*self.get_midplane_curvatures()

    def get_global_stress_at_ply_midplane(self, i):
        return np.dot(self.plys[i].get_q_bar(), self.get_global_strain_at_ply_midplane(i))

    def get_local_strain_at_ply_midplane(self, i):
        return np.dot(self.plys[i].get_t(), self.get_global_strain_at_ply_midplane(i))

    def get_local_stress_at_ply_midplane(self, i):
        return np.dot(self.plys[i].get_q(), self.get_local_strain_at_ply_midplane(i))

    # Setters
    def set_a(self, x):
        self.a = x

    def set_b(self, x):
        self.b = x

    def set_d(self, x):
        self.d = x

    def set_coefficient(self, x):
        self.coefficient = x

    def set_midplane_strains_curv(self, x):
        self.midplane_strains_curv = x

    def a_calc(self):
        x = np.array([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])
        for i in range(0, 3):
            for j in range(0, 3):
                for k in range(0, self.n):
                    x[i][j] += self.plys[k].get_q_bar()[i][j] * self.t[k]
        x = filter_zero(x)
        self.set_a(x)

    def b_calc(self):
        b = np.array([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])
        for i in range(0, 3):
            for j in range(0, 3):
                for k in range(0, self.n):
                    b[i][j] += self.plys[k].get_q_bar()[i][j] * ((self.z[k]**2) - (self.z[k] - self.t[k])**2)
        b *= .5
        b = filter_zero(b)
        self.set_b(b)

    def d_calc(self):
        d = np.array([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])
        for i in range(0, 3):
            for j in range(0, 3):
                for k in range(0, self.n):
                    d[i][j] += self.plys[k].get_q_bar()[i][j] * ((self.z[k]**3) - (self.z[k] - self.t[k])**3)
        d *= (1/3)
        self.set_d(d)

    def a_b_d_calc(self):
        a = self.get_a()
        b = self.get_b()
        d = self.get_d()

        coefficient = np.array([[a[0][0], a[0][1], a[0][2], b[0][0], b[0][1], b[0][2]],
                                [a[0][1], a[1][1], a[1][2], b[0][1], b[1][1], b[1][2]],
                                [a[0][2], a[1][2], a[2][2], b[0][2], b[1][2], b[2][2]],
                                [b[0][0], b[0][1], b[0][2], d[0][0], d[0][1], d[0][2]],
                                [b[0][1], b[1][1], b[1][2], d[0][1], d[1][1], d[1][2]],
                                [b[0][2], b[1][2], b[2][2], d[0][2], d[1][2], d[2][2]]])
        self.set_coefficient(coefficient)

    def midplane_strains_curv_calc(self):
        self.a_b_d_calc()
        abd = self.get_coefficient()
        n = self.loads
        strain_curv = np.matmul(np.linalg.inv(abd), n)
        strain_curv = filter_zero_vector(strain_curv)
        self.set_midplane_strains_curv(strain_curv)
